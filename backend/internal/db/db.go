package db

import (
	"database/sql"
	"fmt"

	"github.com/bmstu-iu9/ptp2022-8-todo-list/backend/internal/config"
	"github.com/bmstu-iu9/ptp2022-8-todo-list/backend/internal/log"
	_ "github.com/lib/pq"
)

var (
	host     = config.Get("DB_HOST")
	port     = config.Get("DB_PORT")
	user     = config.Get("DB_USER")
	dbName   = config.Get("DB_NAME")
	password = config.Get("DB_PASSWORD")
	sslMode  = config.Get("DB_SSL_MODE")
)

func New(logger log.Logger) (*sql.DB, error) {
	params := fmt.Sprintf(
		"host=%s port=%s user=%s dbname=%s password=%s sslmode=%s",
		host, port, user, dbName, password, sslMode)
	logger.Debug("Connecting to DB:", params)
	db, err := sql.Open("postgres", params)
	if err != nil {
		return nil, err
	}

	logger.Debug("Creating new table and test user")
	_, err = db.Exec(`
DROP TABLE IF EXISTS users CASCADE ;
CREATE TABLE users (
       id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
       email varchar(255) UNIQUE NOT NULL,
       nickname varchar(45) NOT NULL,
       password varchar(100) NOT NULL
);
INSERT INTO users(email, nickname, password)
VALUES('test@example.com', 'test', 'Test123Test');
INSERT INTO users(email, nickname, password)
VALUES('test2@example.com', 'test2', 'Test123Test');
`)
	if err != nil {
		return nil, err
	}

	_, err = db.Exec(`
DROP TABLE IF EXISTS items CASCADE ;
CREATE TABLE items (
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    item_name varchar(255) UNIQUE NOT NULL,
    image_src varchar (255) UNIQUE NOT NULL,
    description varchar (255) NOT NULL,
    price int NOT NULL,
    category varchar (30) NOT NULL,
    rarity varchar (30) NOT NULL
);
INSERT INTO items (item_name,image_src,description,price,category,rarity) 
VALUES ('testItem1','test.png','test1',65,'test1','test1');
INSERT INTO items (item_name,image_src,description,price,category,rarity) 
 VALUES ('testItem2','test2.png','test2',62,'test2','test2');
`)
	if err != nil {
		return nil, err
	}
	_, err = db.Exec(`
DROP TABLE IF EXISTS users_items;
CREATE TABLE users_items (
    user_id int,
    item_id int,
    is_equipped bit,
    FOREIGN KEY (user_id) REFERENCES users (id),
    FOREIGN KEY (item_id) REFERENCES items (id)
);
INSERT INTO users_items (user_id, item_id,is_equipped) VALUES (1,1,'0');
INSERT INTO users_items (user_id, item_id,is_equipped) VALUES (2,1,'0');
INSERT INTO users_items (user_id, item_id,is_equipped) VALUES (1,2,'1');
`)
	return db, err
}
