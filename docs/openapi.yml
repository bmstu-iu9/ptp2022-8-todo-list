openapi: 3.0.1

info:
  title: Славатидика API
  description: Gamified TODO-list API.
  version: 0.4.0
  contact:
    name: Starovoytov Alexandr
    url: https://t.me/stewkk
  license:
    name: MIT

servers:
  - url: https://ptp.starovoytovai.ru/api/v1

tags:
  - name: Users
  - name: Auth
  - name: Tasks
  - name: Character
  - name: Items

paths:
  /ping:
    get:
      summary: Ping API server
      responses:
        '418':
          description: I'm a teapot
      security: []
  /users:
    post:
      summary: Create new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - properties:
                    email:
                      $ref: '#/components/schemas/User/properties/email'
                - properties:
                    nickname:
                      $ref: '#/components/schemas/User/properties/nickname'
                - properties:
                    password:
                      $ref: '#/components/schemas/Password'
      tags:
        - Users
      responses:
        '201':
          description: New user created
          headers:
            Location:
              description: New user URI
              schema:
                type: string
                format: url
        '400':
          $ref: '#/components/responses/400BadRequest'
        default:
          $ref: '#/components/responses/UnexpectedError'
      security: []
  /users/{id}:
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
    get:
      tags:
        - Users
      summary: View user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        default:
          $ref: '#/components/responses/UnexpectedError'
    delete:
      tags:
        - Users
      summary: Delete user
      responses:
        '204':
          description: No content
    patch:
      tags:
        - Users
      summary: Modify user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                currentPassword:
                  $ref: '#/components/schemas/Password'
              anyOf:
                - properties:
                    email:
                      $ref: '#/components/schemas/Email'
                - properties:
                    nickname:
                      $ref: '#/components/schemas/Nickname'
                - properties:
                    newPassword:
                      $ref: '#/components/schemas/Password'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /tokens:
    post:
      summary: Create auth token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - properties:
                    email:
                      $ref: '#/components/schemas/Email'
                - properties:
                    password:
                      $ref: '#/components/schemas/Password'
      tags:
        - Auth
      responses:
        '201':
          description: New token created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          headers:
            Location:
              description: User URI
              schema:
                type: string
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        default:
          $ref: '#/components/responses/UnexpectedError'
      security: []
  /users/{id}/tasks:
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
    get:
      summary: List user tasks
      tags:
        - Tasks
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /users/{user_id}/tasks/{task_id}:
    parameters:
      - schema:
          type: integer
        name: user_id
        in: path
        required: true
      - schema:
          type: integer
        name: task_id
        in: path
        required: true
    get:
      summary: View task
      tags:
        - Tasks
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
    put:
      summary: Create or modify task
      tags:
        - Tasks
      responses:
        '201':
          description: Created
        '204':
          description: Modified
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        default:
          $ref: '#/components/responses/UnexpectedError'
    patch:
      summary: Patch task
      tags:
        - Tasks
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
                - properties:
                    name:
                      $ref: '#/components/schemas/Task/properties/name'
                - properties:
                    description:
                      $ref: '#/components/schemas/Task/properties/description'
                - properties:
                    dueDate:
                      $ref: '#/components/schemas/Task/properties/dueDate'
                - properties:
                    shtirlitchHumoresque:
                      $ref: '#/components/schemas/Task/properties/shtirlitchHumoresque'
                - properties:
                    labels:
                      $ref: '#/components/schemas/Task/properties/labels'
                - properties:
                    status:
                      $ref: '#/components/schemas/Task/properties/status'
      responses:
        '204':
          description: Modified
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
    delete:
      summary: Delete task
      tags:
        - Tasks
      responses:
        '204':
          description: Deleted
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /users/{id}/character:
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
    get:
      summary: View user's character
      tags:
        - Character
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
    put:
      summary: Modify user's character
      tags:
        - Character
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Character'
      responses:
        '204':
          description: OK
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
    patch:
      summary: Patch user's character
      tags:
        - Character
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Character'
      responses:
        '204':
          description: OK
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /users/{id}/items:
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
    get:
      summary: List all items in game
      tags:
        - Items
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Item'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /users/{userId}/items/{itemId}:
    parameters:
      - schema:
          type: integer
        name: userId
        in: path
        required: true
      - schema:
          type: integer
        name: itemId
        in: path
        required: true
    get:
      summary: View item
      tags:
        - Items
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
    patch:
      summary: Patch item
      tags:
        - Items
      requestBody:
        content:
          application/json:
            schema: {}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Item'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'

components:
  schemas:
    Token:
      type: string
    Email:
      type: string
      format: email
      pattern: '^[^\s@]+@[^\s@]+\.[^\s@]+$'
    Nickname:
      type: string
      minLength: 4
      maxLength: 40
      pattern: '^([a-z\d]+-)*[a-z\d]+$'
    Password:
      type: string
      format: password
      minLength: 8
      maxLength: 100
      pattern: '^[A-Za-z0-9]\w{8,}$'
    User:
      type: object
      properties:
        id:
          type: integer
        email:
          $ref: '#/components/schemas/Email'
        nickname:
          $ref: '#/components/schemas/Nickname'
    Task:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        createdOn:
          type: string
          format: date-time
        dueDate:
          type: string
          format: date-time
        shtirlitchHumoresque:
          type: string
        labels:
          type: array
          items:
            type: object
            properties:
              text:
                type: string
              color:
                type: string
                format: Hex string
        status:
          type: string
    Character:
      type: object
      description: TODO
    Item:
      type: object
      description: TODO
    Problem:
      type: object
      properties:
        type:
          type: string
          format: uri
          description: URI indicating error type
        title:
          type: string
          description: Human-readable error title
        status:
          type: integer
          description: HTTP status code
        detail:
          type: string
          description: Human-readable error details
        instance:
          type: string
          format: uri
          description: URI indicating error instance
  securitySchemes:
    UserToken:
      type: apiKey
      in: header
      name: Authorization
  responses:
    400BadRequest:
      description: Bad request
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    401Unauthorized:
      description: Unauthorized
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    403Forbidden:
      description: Forbidden
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    404NotFound:
      description: Resource not found
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    UnexpectedError:
      description: Unexpected error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'

security:
  - UserToken: []
